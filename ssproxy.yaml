# TODO: dynamic inventory
- name: Setup EC2
  hosts: localhost
  gather_facts: False
  vars:
    region: ap-southeast-2
    local_home: "{{ lookup('env', 'HOME') }}"
    # Amazon Linux 2 (ARM) - Kernel 5.10 AMIs per region
    amis:
      ap-east-1: ami-00f472a4e9ee44f2b # Hong Kong
      ap-south-1: ami-01ca704eb63c59432 # Mumbai
      ap-northeast-1: ami-04a0964222523729f # Tokyo
      ap-northeast-2: ami-0765c135ebf75c2c8 # Seoul
      ap-southeast-1: ami-082f6d4c4a1b78fa6 # Singapore
      ap-southeast-2: ami-03f7ef21b8063195c # Sydney
      us-east-1: ami-0f254a6bcc5bdad58 # Virginia
      ca-central-1: ami-0087cb681e85a17a7 # Canada
      sa-east-1: ami-028646569b1090061 # Sao Paulo
      eu-west-2: ami-08220be993964f5c4 # London

  module_defaults:
    group/aws:
      region: "{{ region }}"
      aws_access_key_id: "{{ aws_access_key_id }}"
      aws_secret_key: "{{ aws_secret_key }}"

  tasks:
    # Get VPC info
    - name: Fetch default VPC info
      amazon.aws.ec2_vpc_net_info:
      register: vpc_result
    
    - name: Set variable VPC ID
      set_fact:
        default_vpc_id: "{{ vpc_result['vpcs'][0]['vpc_id'] }}"

    - name: Setup SSH keys
      amazon.aws.ec2_key:
        name: ansible_controller
        key_material: "{{ lookup('file', '{}/.ssh/id_rsa.pub'.format(local_home)) }}"

    - name: Create security group
      amazon.aws.ec2_security_group:
        name: ssproxy
        description: "Allow incoming SSH and proxy port"
        vpc_id: "{{ default_vpc_id }}"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0
            rule_desc: SSH
          - proto: tcp
            ports:
              - 8388
            cidr_ip: 0.0.0.0/0
            rule_desc: ssproxy listening port
          - proto: icmp
            from_port: -1
            to_port: -1
            cidr_ip: 0.0.0.0/0
            rule_desc: ping

    - name: Provision EC2 instance
      amazon.aws.ec2_instance:
        name: ssproxy
        state: running
        image:
          # Amazon Linux 2 ARM
          id: "{{ amis[region] }}"
        # vpc_subnet_id:
        instance_type: t4g.nano
        key_name: ansible_controller
        # Use the security group above
        security_group: ssproxy
        network:
          assign_public_ip: true
      register: ec2_result

    # - name: EC2 instance details
    #   ansible.builtin.debug:
    #     var: ec2_result

    - name: Add EC2 host
      loop: "{{ ec2_result.instances }}"
      ansible.builtin.add_host:
       name: "{{ item.public_ip_address }}"
       groups: ec2

    # - name: Ping
    #   ansible.builtin.ping:

- name: Provision proxy
  hosts: ec2
  remote_user: ec2-user
  vars:
    # disable key host checking otherwise it interrupts provisioning script
    ansible_host_key_checking: false
  tasks:
  - name: Provision proxy
    environment:
      SSPROXY_PASS: "{{ ssproxy_pass }}"
    ansible.builtin.script: ./provision.sh